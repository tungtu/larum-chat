#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
// var onConnection = require('../onConnection');
var debug = require('debug')('app-chat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io.
 */
var io = require('socket.io')(server);

io.on('connection', onConnection);

/**
* Store Mongodb
* */
var Messages = require('../models/messages');

var mongoose = require('mongoose');

// var uri = "mongodb://localhost:27017/larum-chat";

var uri = "mongodb://root:YavWodNetshyip7@ds235708.mlab.com:35708/larum";

mongoose.connect(uri);

var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));

db.once('open', function() {
	console.log('Mongodb connected ');
});
// new Messages({
// 	'username': "asdasd",
// 	'message': "asdsadsa"
// }).save(function(err, result) {
// 	if (err) throw err;
// 	if(result) {
// 	}
// });

var user_online = [];
function onConnection(socket){
    console.log("connection " + socket.id);
    socket.on('history-messages', function () {
	    Messages.find({}, function(err, result) {
			if (err) throw err;
			if (result) {
				socket.emit('send-history-message-to-me', result);
			}
		});

    });

    socket.on('send-message', function (data) {
        new Messages({
		    'username': data.username,
		    'message': data.message
	    }).save(function(err, result) {
		    if (err) throw err;
		    if(result) {
			    socket.broadcast.emit('send-message-to-all', result);
			    socket.emit('send-message-to-me', result);
		    }
	    });

    });
	socket.on('send-notify-online', function (data) {
		user_online.push(data.username);
		socket.username = data.username;
		if (user_online.length > 0) {
			io.sockets.emit('send-list-user-online', user_online);
		}
	});



	socket.on('disconnect', function () {
		user_online.splice(user_online.indexOf(socket.username),1);
		socket.broadcast.emit('send-list-user-online', user_online);
		// console.log("disconnection " + socket.username);
	})
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


